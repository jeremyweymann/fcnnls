import { Matrix } from 'ml-matrix';
import { toBeDeepCloseTo, toMatchCloseTo } from 'jest-matcher-deep-close-to';

import fcnnlsVector from '../fcnnlsVector';

expect.extend({ toBeDeepCloseTo, toMatchCloseTo });

describe('myModule test', () => {
  it('example documentation', () => {
    let X = new Matrix([[1, 1, 2], [10, 11, -9], [-1, 0, 0], [-5, 6, -7]]);
    let y = [-1, 11, 0, 1];
    let solution = [0.461, 0.5611, 0];
    let result = fcnnlsVector(X, y);
    expect(result).toBeDeepCloseTo(solution, 4);
  });

  it('negative identity X and positive RHS', () => {
    let X = Matrix.eye(3).mul(-1);
    let y = [1, 2, 3];
    let solution = [0, 0, 0];
    let result = fcnnlsVector(X, y);
    expect(result).toBeDeepCloseTo(solution, 4);
  });

  it('error git 3 dec 2019', () => {
    let mC = new Matrix([
      [0, 0, 0],
      [0, 0, 0],
      [0, 0, 0],
      [0, 0, 0],
      [0, 0, 0],
      [0.0001, 0, 0.0001],
      [0.0001, 0, 0.0001],
      [0.0002, 0, 0.0002],
      [0.0005, 0, 0.0005],
      [0.0009, 0, 0.0009],
      [0.0016, 0, 0.0016],
      [0.0027, 0, 0.0027],
      [0.0045, 0, 0.0045],
      [0.0071, 0, 0.0071],
      [0.0108, 0, 0.0108],
      [0.0158, 0, 0.0158],
      [0.0222, 0, 0.0222],
      [0.0299, 0, 0.0299],
      [0.0388, 0, 0.0388],
      [0.0484, 0, 0.0484],
      [0.0579, 0, 0.0579],
      [0.0666, 0, 0.0666],
      [0.0737, 0, 0.0737],
      [0.0782, 0, 0.0782],
      [0.0798, 0.0002, 0.0802],
      [0.0782, 0.0006, 0.0794],
      [0.0737, 0.0021, 0.0779],
      [0.0666, 0.0059, 0.0784],
      [0.0579, 0.0152, 0.0883],
      [0.0484, 0.035, 0.1184],
      [0.0388, 0.072, 0.1828],
      [0.0299, 0.1326, 0.2951],
      [0.0222, 0.2187, 0.4596],
      [0.0158, 0.3226, 0.661],
      [0.0108, 0.4259, 0.8626],
      [0.0071, 0.5032, 1.0135],
      [0.0045, 0.5319, 1.0683],
      [0.0027, 0.5032, 1.0091],
      [0.0016, 0.4259, 0.8534],
      [0.0009, 0.3226, 0.6461],
      [0.0005, 0.2187, 0.4379],
      [0.0002, 0.1326, 0.2654],
      [0.0001, 0.072, 0.1441],
      [0.0001, 0.035, 0.0701],
      [0, 0.0152, 0.0304],
      [0, 0.0059, 0.0118],
      [0, 0.0021, 0.0042],
      [0, 0.0006, 0.0012],
      [0, 0.0002, 0.0004],
      [0, 0, 0],
      [0, 0, 0],
      [0, 0, 0],
      [0, 0, 0],
      [0, 0, 0],
      [0, 0, 0],
      [0, 0, 0],
      [0, 0, 0],
      [0, 0, 0],
      [0, 0, 0],
      [0, 0, 0],
      [0, 0, 0],
      [0, 0, 0],
      [0, 0, 0],
      [0, 0, 0],
      [0, 0, 0],
      [0, 0, 0],
      [0, 0, 0],
      [0, 0, 0],
      [0, 0, 0],
      [0, 0, 0],
      [0, 0, 0],
      [0, 0, 0],
      [0, 0, 0],
      [0, 0, 0],
      [0, 0, 0],
      [0, 0, 0],
      [0, 0, 0],
      [0, 0, 0],
      [0, 0, 0],
      [0, 0, 0],
      [0, 0, 0],
      [0, 0, 0],
      [0, 0, 0],
      [0, 0, 0],
      [0, 0, 0],
      [0, 0, 0],
      [0, 0, 0],
      [0, 0, 0],
      [0, 0, 0],
      [0, 0, 0],
      [0, 0, 0],
      [0, 0, 0],
      [0, 0, 0],
      [0, 0, 0],
      [0, 0, 0],
      [0, 0, 0],
      [0, 0, 0],
      [0, 0, 0],
      [0, 0, 0],
      [0, 0, 0],
    ]);
    let bf = [
      0,
      0,
      0,
      0,
      0,
      0.001,
      0.001,
      0.002,
      0.005,
      0.009,
      0.016,
      0.027000000000000003,
      0.045,
      0.07100000000000001,
      0.10800000000000001,
      0.15800000000000003,
      0.222,
      0.299,
      0.388,
      0.484,
      0.579,
      0.666,
      0.737,
      0.782,
      0.8119999999999999,
      0.8240000000000001,
      0.8839999999999999,
      1.079,
      1.643,
      2.934,
      5.427999999999999,
      9.581,
      15.531,
      22.74,
      29.921000000000003,
      35.295,
      37.278000000000006,
      35.251000000000005,
      29.829,
      22.591,
      15.314,
      9.284,
      5.0409999999999995,
      2.451,
      1.064,
      0.413,
      0.147,
      0.041999999999999996,
      0.014,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
    ];
    let solution = [0, 50, 10];
    let result = fcnnlsVector(mC, bf);
    expect(result).toBeDeepCloseTo(solution, 4);
  });
});
